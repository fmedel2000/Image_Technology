%Author: Francisco Medel Molinero
%Function periodic: this function perform an input image adding
%noise with a test_pattern and then the function restore the image using
%masks and fourier transforms
function periodicNoise(im_in)
%% Size of the image(M*N)
[size_x, size_y]=size(im_in);

%% TEST PATERN GENERATION
%%Discrete spatial coordinates in x and y direction(cycles per pixel)
x_frecuency=0.15;
y_frecuency=0.15;

%Cartesian coordinates space in x and y direction
x=0:size_x - 1;
y=0:size_y - 1;

%Matrix creation
[X, Y]=meshgrid(x,y);

%Sinosuidal distorsion generation
test_pat = cos(2*pi*(X*x_frecuency+Y*y_frecuency));

%% Adding distorsion to the input image(distorted image creation)
%k is a coefficient which helps us to control the noise generated by test
%patern 
k=0.3; 
distorted_im= im_in + k*test_pat;

%% Displaying imput image, distorted image and their spectrums
figure(1)
subplot(221);
imshow(im_in);
subplot(222);
%We use the brackets in Imshow to display the minimum value in distorted 
%image as black and the maximum value as white.
imshow(distorted_im, []); 

%2D DFT spectrum calculation of the image with the added distorsion
im_in_spekt=fftshift(fft2(im_in));
distorted_im_spekt=fftshift(fft2(distorted_im));

figure(1)
subplot(223)
%In the logarithm we add 1 because the logarithm of 0 is infinity
imshow(log(1+abs(im_in_spekt)), []);
subplot(224)
imshow(log(1+abs(distorted_im_spekt)), []);

%% Noise supression(we have to find the coefficients which are creating the distorsion)
figure(3)
%impixel allows interactive selection of pixels from the image on the 
%current axes, and the user must select distorsion coeficients in the
%spectrum to remove the distorsion of the image
[xi2, yi2, ~]=impixel(log(1+abs(distorted_im_spekt)), []);

%% Mask creation
im_mask=ones(size(distorted_im_spekt));

%mask size definition
mask_size=10;

%We modify the mask to filter the coeficients which are making the
%distorsion, the coordinates of the coeficients are given by the user
for i=1:length(xi2)
    im_mask(yi2(i)-mask_size:yi2(i)+mask_size, xi2(i)-mask_size:xi2(i)+mask_size)=1-fspecial('disk',mask_size)./max(fspecial('disk',mask_size));
end

%% Restoring the image
%We get the restored spectrum mixing distorted image spectrum and the mask 
distorted_im_spekt_restore=distorted_im_spekt.*im_mask;

%Spectrum to image transformation using inverse fourier transformation
%We use real function because we don't want complex numbers
distorted_im_restore=real(ifft2(ifftshift(distorted_im_spekt_restore)));

%% Displaying the results
figure(2)

subplot(231);
imshow(im_in);
title('Input image');

subplot(232);
imshow(distorted_im);
title('Distorted image');

subplot(233);
imshow(distorted_im_restore);
title('Restored image');

subplot(234);
imshow(log(1+abs(im_in_spekt)), []);
title('Input spectrum');

subplot(235);
imshow(log(abs(distorted_im_spekt)), []);
title('Distorted spectrum');

subplot(236);
imshow(log(abs(distorted_im_spekt_restore)), []);
title('Restored spectrum');

%% Saving distorted and restored images
imwrite(distorted_im,'DistortedImage.tif');
imwrite(distorted_im_restore,'RestoredImage.tif');